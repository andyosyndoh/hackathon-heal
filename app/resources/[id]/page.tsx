'use client';import { useEffect, useState } from 'react';import { useParams, useRouter } from 'next/navigation';import {   ArrowLeft,  BookOpen,  Headphones,  Video,  FileText,  Brain,  TrendingUp,  Star,  Clock,  Download,  Play,  Phone} from 'lucide-react';import Link from 'next/link';interface Resource {  id: string;  title: string;  description: string;  content: string; // Assuming content field exists for articles/exercises  type: 'article' | 'video' | 'audio' | 'exercise' | 'assessment' | 'contact';  category: string;  duration_minutes: number;  rating: number;  difficulty: 'beginner' | 'intermediate' | 'advanced';  featured: boolean;}export default function ResourceDetailPage() {  const { id } = useParams();  const router = useRouter();  const [resource, setResource] = useState<Resource | null>(null);  const [loading, setLoading] = useState(true);  const [error, setError] = useState<string | null>(null);  useEffect(() => {    if (id) {      const fetchResource = async () => {        try {          const res = await fetch(`/api/resources/${id}`);          if (!res.ok) {            throw new Error('Failed to fetch resource');          }          const data = await res.json();          setResource(data);        } catch (err: any) {          setError(err.message);        } finally {          setLoading(false);        }      };      fetchResource();    }  }, [id]);  const getResourceIcon = (type: string) => {    switch (type) {      case 'article': return FileText;      case 'video': return Video;      case 'audio': return Headphones;      case 'exercise': return Brain;      case 'assessment': return TrendingUp;      case 'contact': return Phone; // Using Phone for crisis contacts      default: return BookOpen;    }  };  const getDifficultyColor = (difficulty: string) => {    switch (difficulty) {      case 'beginner': return 'text-green-600 bg-green-100';      case 'intermediate': return 'text-yellow-600 bg-yellow-100';      case 'advanced': return 'text-red-600 bg-red-100';      default: return 'text-gray-600 bg-gray-100';    }  };  const handleInteraction = () => {    if (!resource) return;    if (resource.type === 'contact') {      // For crisis contacts, try to initiate a call or show contact info prominently      const phoneNumberMatch = resource.content.match(/\+?\d[\d\s-]+/);      if (phoneNumberMatch) {        window.location.href = `tel:${phoneNumberMatch[0].replace(/\s/g, '')}`;      } else {        alert(`Contact: ${resource.title}\nDetails: ${resource.content}`);      }    } else if (resource.type === 'video') {      // For video, ideally embed or link to video player      alert(`Playing video: ${resource.title}\nContent: ${resource.content}`);      // In a real app, you'd embed a video player here    } else if (resource.type === 'article') {      // For articles, display content or link to full article      alert(`Reading article: ${resource.title}\nContent: ${resource.content}`);    } else {      alert(`Interacting with ${resource.type}: ${resource.title}\nContent: ${resource.content}`);    }  };  if (loading) {    return (      <div className="min-h-screen flex items-center justify-center bg-gray-50">        <p className="text-gray-600">Loading resource...</p>      </div>    );  }  if (error) {    return (      <div className="min-h-screen flex items-center justify-center bg-gray-50">        <p className="text-red-600">Error: {error}</p>      </div>    );  }  if (!resource) {    return (      <div className="min-h-screen flex items-center justify-center bg-gray-50">        <p className="text-gray-600">Resource not found.</p>      </div>    );  }  const IconComponent = getResourceIcon(resource.type);  return (    <div className="min-h-screen bg-gray-50">      {/* Header */}      <div className="bg-white shadow-sm border-b border-gray-200">        <div className="max-w-7xl mx-auto px-4 py-4">          <div className="flex items-center space-x-4">            <Link href="/resources" className="p-2 hover:bg-gray-100 rounded-lg transition-colors">              <ArrowLeft className="h-5 w-5 text-gray-600" />            </Link>            <div className="flex items-center space-x-2">              <IconComponent className="h-6 w-6 text-blue-600" />              <h1 className="text-xl font-bold text-gray-900">{resource.title}</h1>            </div>          </div>        </div>      </div>      <div className="max-w-4xl mx-auto px-4 py-8">        <div className="heal-card p-6">          <div className="flex items-start space-x-4 mb-6">            <div className="w-16 h-16 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">              <IconComponent className="h-8 w-8 text-blue-600" />            </div>            <div className="flex-1">              <h2 className="text-2xl font-bold text-gray-900 mb-2">{resource.title}</h2>              <p className="text-gray-600 mb-4">{resource.description}</p>                            <div className="flex items-center space-x-6 text-sm text-gray-500">                {resource.duration_minutes > 0 && (                  <div className="flex items-center space-x-1">                    <Clock className="h-4 w-4" />                    <span>{resource.duration_minutes} min</span>                  </div>                )}                {resource.rating > 0 && (                  <div className="flex items-center space-x-1">                    <Star className="h-4 w-4 text-yellow-500 fill-current" />                    <span>{resource.rating}</span>                  </div>                )}                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(resource.difficulty)}`}>                  {resource.difficulty}                </span>              </div>            </div>          </div>          <div className="prose prose-lg max-w-none mb-6">            {resource.type === 'article' || resource.type === 'exercise' || resource.type === 'contact' ? (              <p>{resource.content}</p>            ) : resource.type === 'video' ? (              // Placeholder for video embed              <div className="w-full bg-gray-200 rounded-lg flex items-center justify-center" style={{ height: '300px' }}>                <Video className="h-12 w-12 text-gray-500" />                <p className="text-gray-500 ml-2">Video Player Placeholder</p>              </div>            ) : resource.type === 'audio' ? (              // Placeholder for audio player              <div className="w-full bg-gray-200 rounded-lg flex items-center justify-center py-8">                <Headphones className="h-12 w-12 text-gray-500" />                <p className="text-gray-500 ml-2">Audio Player Placeholder</p>              </div>            ) : (              <p>Content for {resource.type} resource: {resource.content}</p>            )}          </div>          <div className="flex space-x-3">            <button onClick={handleInteraction} className="heal-button flex items-center space-x-2">              <Play className="h-4 w-4" />              <span>{resource.type === 'contact' ? 'Call / View Contact' : 'Start Resource'}</span>            </button>            <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors flex items-center space-x-2">              <Download className="h-4 w-4" />              <span>Save</span>            </button>          </div>        </div>      </div>    </div>  );}